{"ast":null,"code":"var _jsxFileName = \"E:\\\\thesis web crawler\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CrawlerControl from \"./components/CrawlerControl\";\nimport ResultsDisplay from \"./components/ResultsDisplay\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\n// Add a decodeHTML function to handle decoding of HTML entities.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction decodeHTML(html) {\n  const txt = document.createElement(\"textarea\");\n  txt.innerHTML = html;\n  return txt.value;\n}\nfunction App() {\n  _s();\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [crawlInProgress, setCrawlInProgress] = useState(false);\n  useEffect(() => {\n    // Poll crawl status every 5 seconds\n    const interval = setInterval(() => {\n      checkCrawlStatus();\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  const checkCrawlStatus = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/crawl-status\");\n      setCrawlInProgress(response.data.in_progress);\n      if (!response.data.in_progress) {\n        fetchResults(); // Fetch results once the crawl is completed\n      }\n    } catch (error) {\n      console.error(\"Error checking crawl status:\", error);\n    }\n  };\n  const handleStartCrawl = async () => {\n    setLoading(true);\n    setMessage(\"\");\n    try {\n      const response = await axios.post(\"http://localhost:5000/start-crawl\", {\n        dataset_size: 100\n      },\n      // Assuming a default value, modify as needed\n      {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.data.success) {\n        setMessage(\"Crawling started successfully!\");\n      } else {\n        setMessage(response.data.status);\n      }\n    } catch (error) {\n      setMessage(\"An error occurred while starting the crawl.\");\n      console.error(\"Error starting crawl:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchResults = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/results\");\n      if (response.data.status === \"Success\" && response.data.data.length > 0) {\n        // Decode HTML entities before setting the results\n        const decodedResults = response.data.data.map(result => ({\n          ...result,\n          title: decodeHTML(result.title) // Decode the title for HTML entities\n        }));\n        setResults(decodedResults);\n        setMessage(\"\");\n      } else if (response.data.status === \"No data found\") {\n        setMessage(\"No crawl results available yet.\");\n        setResults([]);\n      } else {\n        setMessage(\"Failed to fetch results.\");\n      }\n    } catch (error) {\n      setMessage(\"Failed to fetch results.\");\n      console.error(\"Error fetching results:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot Detection Web Crawler\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CrawlerControl, {\n      onStartCrawl: handleStartCrawl,\n      loading: loading || crawlInProgress,\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsDisplay, {\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"53lOpvkzvrQyiaEe7zMBee0lKl8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","CrawlerControl","ResultsDisplay","axios","jsxDEV","_jsxDEV","decodeHTML","html","txt","document","createElement","innerHTML","value","App","_s","results","setResults","loading","setLoading","message","setMessage","crawlInProgress","setCrawlInProgress","interval","setInterval","checkCrawlStatus","clearInterval","response","get","data","in_progress","fetchResults","error","console","handleStartCrawl","post","dataset_size","headers","success","status","length","decodedResults","map","result","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStartCrawl","_c","$RefreshReg$"],"sources":["E:/thesis web crawler/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport CrawlerControl from \"./components/CrawlerControl\";\r\nimport ResultsDisplay from \"./components/ResultsDisplay\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\n\r\n// Add a decodeHTML function to handle decoding of HTML entities.\r\nfunction decodeHTML(html) {\r\n  const txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n}\r\n\r\nfunction App() {\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [crawlInProgress, setCrawlInProgress] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Poll crawl status every 5 seconds\r\n    const interval = setInterval(() => {\r\n      checkCrawlStatus();\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const checkCrawlStatus = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/crawl-status\");\r\n      setCrawlInProgress(response.data.in_progress);\r\n      if (!response.data.in_progress) {\r\n        fetchResults(); // Fetch results once the crawl is completed\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error checking crawl status:\", error);\r\n    }\r\n  };\r\n\r\n  const handleStartCrawl = async () => {\r\n    setLoading(true);\r\n    setMessage(\"\");\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/start-crawl\",\r\n        { dataset_size: 100 }, // Assuming a default value, modify as needed\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      if (response.data.success) {\r\n        setMessage(\"Crawling started successfully!\");\r\n      } else {\r\n        setMessage(response.data.status);\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"An error occurred while starting the crawl.\");\r\n      console.error(\"Error starting crawl:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchResults = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/results\");\r\n      if (response.data.status === \"Success\" && response.data.data.length > 0) {\r\n        // Decode HTML entities before setting the results\r\n        const decodedResults = response.data.data.map((result) => ({\r\n          ...result,\r\n          title: decodeHTML(result.title), // Decode the title for HTML entities\r\n        }));\r\n        setResults(decodedResults);\r\n        setMessage(\"\");\r\n      } else if (response.data.status === \"No data found\") {\r\n        setMessage(\"No crawl results available yet.\");\r\n        setResults([]);\r\n      } else {\r\n        setMessage(\"Failed to fetch results.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Failed to fetch results.\");\r\n      console.error(\"Error fetching results:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Chatbot Detection Web Crawler</h1>\r\n      <CrawlerControl\r\n        onStartCrawl={handleStartCrawl}\r\n        loading={loading || crawlInProgress}\r\n        message={message}\r\n      />\r\n      <ResultsDisplay results={results} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}